(* Piece-square tables. *)

open Core_kernel [@@warning "-D"]
open Eval_common
open Score.Syntax

(* By square. *)
let pawn = [|
  (* 1 *)
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  (* 2 *)
  -13 $ 7;
  -4 $ 0;
  1 $ 4;
  6 $ 1;
  3 $ 10;
  -9 $ 4;
  -9 $ 3;
  -16 $ 7;
  (* 3 *)
  -21 $ 5;
  -17 $ 6;
  -1 $ -6;
  12 $ -14;
  8 $ -10;
  -4 $ -5;
  -15 $ 7;
  -24 $ 11;
  (* 4 *)
  -14 $ 16;
  -21 $ 17;
  9 $ -10;
  10 $ -24;
  4 $ -22;
  4 $ -10;
  -20 $ 17;
  -17 $ 18;
  (* 5 *)
  -15 $ 18;
  -18 $ 11;
  -16 $ -8;
  4 $ -30;
  -2 $ -24;
  -18 $ -9;
  -23 $ 13;
  -17 $ 21;
  (* 6 *)
  -20 $ 48;
  -9 $ 44;
  1 $ 31;
  17 $ -9;
  36 $ -6;
  -9 $ 31;
  -6 $ 45;
  -23 $ 49;
  (* 7 *)
  -33 $ -70;
  -66 $ -9;
  -16 $ -22;
  65 $ -23;
  41 $ -18;
  39 $ -14;
  -47 $ 4;
  -62 $ -51;
  (* 8 *)
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
  0 $ 0;
|]

(* By square. *)
let knight = [|
  (* 1 *)
  -31 $ -38;
  -6 $ -24;
  -20 $ -22;
  -16 $ -1;
  -11 $ -1;
  -22 $ -19;
  -8 $ -20;
  -41 $ -30;
  (* 2 *)
  1 $ -5;
  -11 $ 3;
  -6 $ -19;
  -1 $ -2;
  0 $ 0;
  -9 $ -16;
  -8 $ -3;
  -6 $ 1;
  (* 3 *)
  7 $ -21;
  8 $ -5;
  7 $ 2;
  10 $ 19;
  10 $ 19;
  4 $ 2;
  8 $ -4;
  3 $ -19;
  (* 4 *)
  16 $ 21;
  17 $ 30;
  23 $ 41;
  27 $ 50;
  24 $ 53;
  23 $ 41;
  19 $ 28;
  13 $ 26;
  (* 5 *)
  13 $ 30;
  23 $ 30;
  37 $ 51;
  30 $ 70;
  26 $ 67;
  38 $ 50;
  22 $ 33;
  14 $ 28;
  (* 6 *)
  -24 $ 25;
  -5 $ 37;
  25 $ 56;
  22 $ 60;
  27 $ 55;
  29 $ 55;
  -1 $ 32;
  -19 $ 25;
  (* 7 *)
  13 $ -2;
  -11 $ 18;
  27 $ -2;
  37 $ 24;
  41 $ 24;
  40 $ -7;
  -13 $ 16;
  2 $ -2;
  (* 8 *)
  -167 $ -5;
  -91 $ 12;
  -117 $ 41;
  -38 $ 17;
  -18 $ 19;
  -105 $ 48;
  -119 $ 24;
  -165 $ -17;
|]

(* By square. *)
let bishop = [|
  (* 1 *)
  5 $ -21;
  1 $ 1;
  -1 $ 5;
  1 $ 5;
  2 $ 8;
  -6 $ -2;
  0 $ 1;
  4 $ -25;
  (* 2 *)
  26 $ -17;
  2 $ -31;
  15 $ -2;
  8 $ 8;
  8 $ 8;
  13 $ -3;
  9 $ -31;
  26 $ -29;
  (* 3 *)
  9 $ 3;
  22 $ 9;
  -5 $ -3;
  18 $ 19;
  17 $ 20;
  -5 $ -6;
  20 $ 4;
  15 $ 8;
  (* 4 *)
  0 $ 12;
  10 $ 17;
  17 $ 32;
  20 $ 32;
  24 $ 34;
  12 $ 30;
  15 $ 17;
  0 $ 14;
  (* 5 *)
  -20 $ 34;
  13 $ 31;
  1 $ 38;
  21 $ 45;
  12 $ 46;
  6 $ 38;
  13 $ 33;
  -14 $ 37;
  (* 6 *)
  -13 $ 31;
  -11 $ 45;
  -7 $ 23;
  2 $ 40;
  8 $ 38;
  -21 $ 34;
  -5 $ 46;
  -9 $ 35;
  (* 7 *)
  -59 $ 38;
  -49 $ 22;
  -13 $ 30;
  -35 $ 36;
  -33 $ 36;
  -13 $ 33;
  -68 $ 21;
  -55 $ 35;
  (* 8 *)
  -66 $ 18;
  -65 $ 36;
  -123 $ 48;
  -107 $ 56;
  -112 $ 53;
  -97 $ 43;
  -33 $ 22;
  -74 $ 15;
|]

(* By square. *)
let rook = [|
  (* 1 *)
  -26 $ -1;
  -21 $ 3;
  -14 $ 4;
  -6 $ -4;
  -5 $ -4;
  -10 $ 3;
  -13 $ -2;
  -22 $ -14;
  (* 2 *)
  -70 $ 5;
  -25 $ -10;
  -18 $ -7;
  -11 $ -11;
  -9 $ -13;
  -15 $ -15;
  -15 $ -17;
  -77 $ 3;
  (* 3 *)
  -39 $ 3;
  -16 $ 14;
  -25 $ 9;
  -14 $ 2;
  -12 $ 3;
  -25 $ 8;
  -4 $ 9;
  -39 $ 1;
  (* 4 *)
  -32 $ 24;
  -21 $ 36;
  -21 $ 36;
  -5 $ 26;
  -8 $ 27;
  -19 $ 34;
  -13 $ 33;
  -30 $ 24;
  (* 5 *)
  -22 $ 46;
  4 $ 38;
  16 $ 38;
  35 $ 30;
  33 $ 32;
  10 $ 36;
  17 $ 31;
  -14 $ 43;
  (* 6 *)
  -33 $ 60;
  17 $ 41;
  0 $ 54;
  33 $ 36;
  29 $ 35;
  3 $ 52;
  33 $ 32;
  -26 $ 56;
  (* 7 *)
  -18 $ 41;
  -24 $ 47;
  -1 $ 38;
  15 $ 38;
  14 $ 37;
  -2 $ 36;
  -24 $ 49;
  -12 $ 38;
  (* 8 *)
  33 $ 55;
  24 $ 63;
  -1 $ 73;
  9 $ 66;
  10 $ 67;
  0 $ 69;
  34 $ 59;
  37 $ 56;
|]

(* By square. *)
let queen = [|
  (* 1 *)
  20 $ -34;
  4 $ -26;
  9 $ -34;
  17 $ -16;
  18 $ -18;
  14 $ -46;
  9 $ -28;
  22 $ -44;
  (* 2 *)
  6 $ -15;
  15 $ -22;
  22 $ -42;
  13 $ 2;
  17 $ 0;
  22 $ -49;
  18 $ -29;
  3 $ -18;
  (* 3 *)
  6 $ -1;
  21 $ 7;
  5 $ 35;
  0 $ 34;
  2 $ 34;
  5 $ 37;
  24 $ 9;
  13 $ -15;
  (* 4 *)
  9 $ 17;
  12 $ 46;
  -6 $ 59;
  -19 $ 109;
  -17 $ 106;
  -4 $ 57;
  18 $ 48;
  8 $ 33;
  (* 5 *)
  -10 $ 42;
  -8 $ 79;
  -19 $ 66;
  -32 $ 121;
  -32 $ 127;
  -23 $ 80;
  -8 $ 95;
  -10 $ 68;
  (* 6 *)
  -28 $ 56;
  -23 $ 50;
  -33 $ 66;
  -18 $ 70;
  -17 $ 71;
  -19 $ 63;
  -18 $ 65;
  -28 $ 76;
  (* 7 *)
  -16 $ 61;
  -72 $ 108;
  -19 $ 65;
  -52 $ 114;
  -54 $ 120;
  -14 $ 59;
  -69 $ 116;
  -11 $ 73;
  (* 8 *)
  8 $ 43;
  19 $ 47;
  0 $ 79;
  3 $ 78;
  -3 $ 89;
  13 $ 65;
  18 $ 79;
  21 $ 56;
|]

(* By square. *)
let king = [|
  (* 1 *)
  87 $ -77;
  67 $ -49;
  4 $ -7;
  -9 $ -26;
  -10 $ -27;
  -8 $ -1;
  57 $ -50;
  79 $ -82;
  (* 2 *)
  35 $ 3;
  -27 $ -3;
  -41 $ 16;
  -89 $ 29;
  -64 $ 26;
  -64 $ 28;
  -25 $ -3;
  30 $ -4;
  (* 3 *)
  -44 $ -19;
  -16 $ -19;
  28 $ 7;
  0 $ 35;
  18 $ 32;
  31 $ 9;
  -13 $ -18;
  -36 $ -13;
  (* 4 *)
  -48 $ -44;
  98 $ -39;
  71 $ 12;
  -22 $ 45;
  12 $ 41;
  79 $ 10;
  115 $ -34;
  -59 $ -38;
  (* 5 *)
  -6 $ -10;
  95 $ -39;
  39 $ 14;
  -49 $ 18;
  -27 $ 19;
  35 $ 14;
  81 $ -34;
  -50 $ -13;
  (* 6 *)
  24 $ -39;
  123 $ -22;
  105 $ -1;
  -22 $ -21;
  -39 $ -20;
  74 $ -15;
  100 $ -23;
  -17 $ -49;
  (* 7 *)
  0 $ -98;
  28 $ -21;
  7 $ -18;
  -3 $ -41;
  -57 $ -39;
  12 $ -26;
  22 $ -24;
  -15 $ -119;
  (* 8 *)
  -16 $ -153;
  49 $ -94;
  -21 $ -73;
  -19 $ -32;
  -51 $ -55;
  -42 $ -62;
  53 $ -93;
  -58 $ -133;
|]

let idx p sq =
  Square.to_int sq + (Piece.to_int p * Square.count)

let tbl =
  let open Piece in
  let len = Color.count * Kind.count * Square.count in
  let t = Array.create ~len (0 $ 0) in
  for i = 0 to Square.last do
    let sq = Square.of_int_exn i in
    let wsq = relative_square sq White in
    t.(idx white_pawn   sq) <- Eval_material.White.pawn   +$ pawn.(wsq);
    t.(idx white_knight sq) <- Eval_material.White.knight +$ knight.(wsq);
    t.(idx white_bishop sq) <- Eval_material.White.bishop +$ bishop.(wsq);
    t.(idx white_rook   sq) <- Eval_material.White.rook   +$ rook.(wsq);
    t.(idx white_queen  sq) <- Eval_material.White.queen  +$ queen.(wsq);
    t.(idx white_king   sq) <- Eval_material.White.king   +$ king.(wsq);
    let bsq = relative_square sq Black in
    t.(idx black_pawn   sq) <- Eval_material.Black.pawn   -$ pawn.(bsq);
    t.(idx black_knight sq) <- Eval_material.Black.knight -$ knight.(bsq);
    t.(idx black_bishop sq) <- Eval_material.Black.bishop -$ bishop.(bsq);
    t.(idx black_rook   sq) <- Eval_material.Black.rook   -$ rook.(bsq);
    t.(idx black_queen  sq) <- Eval_material.Black.queen  -$ queen.(bsq);
    t.(idx black_king   sq) <- Eval_material.Black.king   -$ king.(bsq);
  done;
  t

let go pos =
  Position.collect_all pos |>
  List.fold ~init:(0 $ 0) ~f:(fun acc (sq, p) ->
      acc +$ uget tbl (idx p sq))
